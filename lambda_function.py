import json
import os
import requests
import urllib.parse
from discord_webhook import DiscordWebhook, DiscordEmbed

def get_player_data(username):
    username = urllib.parse.unquote(username)

    if not username:
        return {"error": "Username is empty"}

    url = f"https://api.wiseoldman.net/v2/players/{username}/gained?period=day"
    response = requests.get(url)

    if response.status_code != 200:
        return {"error": response.status_code }

    return response.json()

def is_player_active(response):
    overall_gained = response['data']['skills']['overall']['experience']['gained']
    if overall_gained > 0:
        return True

    return False

def filter_experience_gains(response):
    skills = response['data']['skills']
    skill_gains = []

    for skill in skills.values():
        if skill['experience']['gained'] > 0:
            skill_gains.append({
                'skill': skill['metric'],
                'gained': skill['experience']['gained']
            })
    return skill_gains

def filter_boss_gains(response):
    bosses = response['data']['bosses']
    boss_gains = []

    for boss in bosses.values():
        if boss['kills']['gained'] > 0:
            boss_gains.append({
                'boss': boss['metric'],
                'gained': boss['kills']['gained']
            })
    return boss_gains

def filter_activity_gains(response):
    activities = response['data']['activities']
    activity_gains = []

    for activity in activities.values():
        if activity['score']['gained'] > 0:
            activity_gains.append({
                'activity': activity['metric'],
                'gained': activity['score']['gained']
            })
    return activity_gains

def get_efficiency_data(response):
    ehp = response['data']['computed']['ehp']['value']['gained']
    ehb = response['data']['computed']['ehb']['value']['gained']
    efficiency_data = []
    efficiency_data.append({
        'ehp': ehp,
        'ehb': ehb,
        'gained': ehp + ehb
    })
    return efficiency_data

def merge_player_data(username, response):
    player_data = {
        'username': username,
        'experience_gains': filter_experience_gains(response),
        'boss_gains': filter_boss_gains(response),
        'activity_gains': filter_activity_gains(response),
        'efficiency_data': get_efficiency_data(response)
    }

    return player_data

def sort_players_by(players, sort_by = 'experience_gains'):
    if len(players) == 1:
        return players

    sorted_players = dict(
            sorted(
                players.items(),
                key=lambda item: sum(skill['gained'] for skill in item[1][sort_by]),
                reverse=True
            )
        )
    return sorted_players

def _add_embed_field_if_data_exists(embed, name, data_list, formatter_func, inline=False):
    if data_list:
        value_str = "\n".join(formatter_func(item) for item in data_list)
        embed.add_embed_field(name=name, value=value_str, inline=inline)

def build_ranking_embed(players, sort_by='experience_gains'):
    """Builds a summary ranking embed, sorted by the given metric."""
    embed = DiscordEmbed(
        title=f"Daily Group Ranking by {sort_by.replace('_', ' ').title()}",
        description="Here is the daily activity ranking for the group.",
        color="03b2f8"
    )
    embed.set_author(name="Osrs Activity Bot")
    embed.set_footer(text="Player Rankings - Generated by Osrs Activity Bot")
    embed.set_timestamp()

    sort_configs = {
        'experience_gains': {
            'get_val': lambda exp, ehp, ehb: exp,
            'label': 'EXP',
            'other_metrics': [
                ('EHP', lambda exp, ehp, ehb: ehp),
                ('EHB', lambda exp, ehp, ehb: ehb)
            ]
        },
        'efficiency_data': {
            'get_val': lambda exp, ehp, ehb: ehp + ehb,
            'label': 'EHP+EHB',
            'other_metrics': [
                ('EXP', lambda exp, ehp, ehb: exp)
            ]
        },
        'ehp': {
            'get_val': lambda exp, ehp, ehb: ehp,
            'label': 'EHP',
            'other_metrics': [
                ('EXP', lambda exp, ehp, ehb: exp),
                ('EHB', lambda exp, ehp, ehb: ehb)
            ]
        },
        'ehb': {
            'get_val': lambda exp, ehp, ehb: ehb,
            'label': 'EHB',
            'other_metrics': [
                ('EXP', lambda exp, ehp, ehb: exp),
                ('EHP', lambda exp, ehp, ehb: ehp)
            ]
        }
    }
    default_config_key = 'experience_gains'
    config = sort_configs.get(sort_by, sort_configs[default_config_key])

    for idx, (username, data) in enumerate(players.items(), 1):
        total_exp = sum(s['gained'] for s in data['experience_gains'])
        ehp = data['efficiency_data'][0]['ehp']
        ehb = data['efficiency_data'][0]['ehb']

        primary_metric_val = config['get_val'](total_exp, ehp, ehb)
        primary_metric_label = config['label']

        value_lines = [f"{primary_metric_label}: `{primary_metric_val:,}`"]
        for label, func in config['other_metrics']:
            metric_value = func(total_exp, ehp, ehb)
            value_lines.append(f"{label}: `{metric_value:,}`")

        field_value = "\n".join(value_lines)
        field_name = f"#{idx} {username}"

        embed.add_embed_field(name=field_name, value=field_value, inline=False)
    return embed

def build_player_embeds(players):
    """Builds a list of individual embeds for each player."""
    player_embed_list = []
    for username, data in players.items():
        player_url = f"https://wiseoldman.net/players/{urllib.parse.quote(username)}/gained?period=day"
        embed = DiscordEmbed(title=f"Daily Gains for {username}", color="03b2f8")
        embed.set_author(name=username, url=player_url)
        embed.set_footer(text=f"Details for {username} - Generated by Osrs Activity Bot")
        embed.set_timestamp()

        if data['experience_gains']:
            for s in data['experience_gains']:
                embed.add_embed_field(name=s['skill'].capitalize(), value=f"{s['gained']:,} xp", inline=False)

        if data['boss_gains']:
            for b in data['boss_gains']:
                embed.add_embed_field(name=b['boss'].replace('_', ' ').capitalize(), value=f"{b['gained']:,} kills", inline=False)

        if data['activity_gains']:
            for a in data['activity_gains']:
                embed.add_embed_field(name=a['activity'].replace('_', ' ').capitalize(), value=f"{a['gained']:,} score", inline=False)

        eff = data['efficiency_data'][0]
        embed.add_embed_field(name="EHP Gained", value=f"`{eff['ehp']:,}`", inline=False) # Changed to inline=False
        embed.add_embed_field(name="EHB Gained", value=f"`{eff['ehb']:,}`", inline=False) # Changed to inline=False
        player_embed_list.append(embed)
    return player_embed_list

def execute_discord_webhooks(embeds_to_send, webhook_url):
    """
    Sends a list of DiscordEmbed objects, each as a separate webhook message,
    following the user-provided pattern.
    """
    current_embed_description = "N/A"
    try:
        for i, embed_content in enumerate(embeds_to_send):
            current_embed_description = embed_content.title if embed_content and hasattr(embed_content, 'title') else f"Embed #{i+1}"

            webhook = DiscordWebhook(url=webhook_url, username="Osrs Activity Bot") # Added username

            webhook.add_embed(embed_content)

            responses = webhook.execute()

            if responses:
                actual_responses = responses if isinstance(responses, list) else [responses]
                for response in actual_responses:
                    if hasattr(response, 'status_code') and response.status_code >= 400:
                        error_content = response.content.decode() if hasattr(response, 'content') else 'No content'
                        print(f"Discord webhook for embed '{current_embed_description}' returned error status {response.status_code}: {error_content}")
    except requests.exceptions.RequestException as e:
        print(f"Network error sending Discord embed '{current_embed_description}': {e}")
    except ValueError as e:
        print(f"Configuration error for Discord webhook (possibly for embed '{current_embed_description}'): {e}")
    except Exception as e:
        print(f"An unexpected error occurred sending Discord embed '{current_embed_description}': {e}")

def lambda_handler(event, context):
    players = {}
    usernames_to_fetch = os.environ['USERNAMES'].split(',')
    for username in usernames_to_fetch:
        response = get_player_data(username)
        if response.get('error'):
            print(f"Error fetching data for {username}: {response['error']}")
            continue
        if is_player_active(response):
            players[username] = merge_player_data(username, response)

    webhook_url = os.environ['WEBHOOK_URL']

    if players:
        sorted_players = sort_players_by(players, 'experience_gains')

        all_embeds_to_send = []

        ranking_embed = build_ranking_embed(sorted_players, sort_by='experience_gains')
        if ranking_embed:
            all_embeds_to_send.append(ranking_embed)

        player_embeds = build_player_embeds(sorted_players)
        all_embeds_to_send.extend(player_embeds)

        if all_embeds_to_send:
            execute_discord_webhooks(all_embeds_to_send, webhook_url)

        print(f"Data processed for {len(sorted_players)} active players.")
    else:
        print("No active players found or data fetched.")

    return {
        'statusCode': 200,
        'body': json.dumps({
            'message': 'Hello from Lambda!',
        })
    }

if __name__ == "__main__":
    lambda_handler({}, None)
